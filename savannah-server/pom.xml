<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <artifactId>savannah-parent</artifactId>
        <groupId>com.shedhack.cloud</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>

    <artifactId>savannah-server</artifactId>

    <properties>

        <!-- Docker properties -->
        <docker.image.name>${project.groupId}/${project.artifactId}:${project.version}</docker.image.name>
        <docker.from>java:8u40</docker.from>
        <docker.container.port>8080</docker.container.port>
        <docker.host.port>8080</docker.host.port>

    </properties>


    <dependencies>

        <!-- Internal dependencies -->
        <dependency>
            <groupId>com.shedhack.cloud</groupId>
            <artifactId>savannah-core</artifactId>
        </dependency>

        <!-- Shedhack -->

        <dependency>
            <groupId>com.shedhack.tool</groupId>
            <artifactId>spring-boost-enabler</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>

        <!-- Spring -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator-docs</artifactId>
        </dependency>

        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>hal-browser</artifactId>
        </dependency>

        <!-- FIXME: DB added for inmemory purposes, change accordingly -->
        <!-- This db is also used by the trace-request-jpa module and the settings are
        set in the application.yml -->
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Config server, see bootstrap.yml -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>

        <!-- Swagger http://host:port/api/docs-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.4.0</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.4.0</version>
        </dependency>

        <!-- Test dependencies -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- reloads the application when changes detected -->
        <!-- for intellij you need to Build>Make Project to cause changes -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>

    </dependencies>

    <build>
        <finalName>savannah-server</finalName>

        <!-- Added to override properties-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.xml</include>
                    <include>**/*.txt</include>
                </includes>
            </resource>
        </resources>

        <plugins>

            <!-- Git properties -->
            <!-- Initial build will fail unless you add to git, uncomment when ready.
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.1.5</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>src/main/resources/git-build.properties</generateGitPropertiesFilename>
                    <format>properties</format>
                    <dateFormat>dd.MM.yyyy HH:mm:ss z</dateFormat>
                </configuration>
            </plugin> -->

            <!-- Filtering, mvn resources:resources, maven will replace props using @,
            for example you want @pom.version@ -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>

            <!-- mvn spring-boot:run -Dserver.port=8081 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>

                    <!-- Helps with automatic restart when files are changed.-->
                    <fork>true</fork>
                </configuration>
            </plugin>

            <!-- Docker plugin - docker:build ALWAYS requires to be called after mvn package!!!!!-->
            <!-- docker:build, docker:start, docker:stop, docker:watch, docker:remove, docker:logs, docker:source -->
            <!-- -Ddocker.follow=true also a good option -->
            <!-- To find you docker ip address with docker machine: [docker-machine ip default] -->
            <!-- When running on a mac you may need [eval "$(docker-machine env default)"] : with the quotes -->
            <!-- Running with JMeter (could also run integration tests (need to update the executions):
                mvn package -DskipTests docker:build
                mvn docker:run -Ddocker.follow=false jmeter:jmeter -Dhost=192.168.99.100 -Dport=8080 docker:stop
            -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.15.9</version>
                <configuration>
                    <verbose>true</verbose>
                    <logDate>default</logDate>
                    <autoPull>true</autoPull>
                    <verbose>true</verbose>
                    <images>

                        <image>
                            <alias>service</alias>
                            <name>${docker.image.name}</name>

                            <build>
                                <from>${docker.from}</from>

                                <assembly>
                                    <basedir>/maven</basedir>
                                    <inline xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                            xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                                            xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">

                                        <dependencySets>
                                            <dependencySet>
                                                <includes>
                                                    <include>${project.groupId}:${project.artifactId}</include>
                                                </includes>
                                                <outputDirectory>.</outputDirectory>
                                                <outputFileNameMapping>app.jar</outputFileNameMapping>
                                            </dependencySet>
                                        </dependencySets>
                                    </inline>
                                </assembly>

                                <!-- Expose ports -->
                                <ports>
                                    <port>${docker.container.port}</port>
                                </ports>

                                <entryPoint>
                                    <arg>java</arg>
                                    <arg>-Djava.security.egd=file:/dev/./urandom</arg>
                                    <arg>-jar</arg>
                                    <arg>/maven/app.jar</arg>
                                </entryPoint>

                            </build>

                            <run>
                                <ports>
                                    <port>${docker.host.port}:${docker.container.port}</port>
                                </ports>

                                <log>
                                    <prefix>TC</prefix>
                                    <color>cyan</color>
                                </log>

                                <wait>
                                    <http>
                                        <url>http://${docker.host.address}:${docker.host.port}/api/ping</url>
                                        <method>GET</method>
                                    </http>
                                    <log>${docker.image.name} is ready.</log>
                                    <time>200000</time>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>

            </plugin>
        </plugins>
    </build>

</project>